from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
import requests


# --------- G·ª£i √Ω s·∫£n ph·∫©m / khuy·∫øn m√£i ----------
class ActionSuggestProducts(Action):
    def name(self) -> Text:
        return "action_suggest_products"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # C√°c thu·ªôc t√≠nh l·ªçc s·∫£n ph·∫©m
        filter_fields = [
            "brandName",
            "categoryName",
            "materialName",
            "collarName",
            "sleeveName",
            "colorName",
            "sizeName",
        ]

        params = {k: "" for k in filter_fields}
        for ent in tracker.latest_message.get("entities", []):
            et = ent.get("entity")
            if et in params:
                params[et] = ent.get("value", "")

        # Ph√¢n trang m·∫∑c ƒë·ªãnh
        params.update({"page": 0, "size": 5})

        try:
            resp = requests.get(
                "http://localhost:8080/api/products/filter-by-attributes",
                params=params,
                timeout=7,
            )
            resp.raise_for_status()
            products = resp.json().get("content", [])
        except Exception as e:
            dispatcher.utter_message(
                text=f"‚ùå Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch s·∫£n ph·∫©m. L√Ω do: {str(e)}"
            )
            return []

        if not products:
            dispatcher.utter_message(
                text="üò¢ M√¨nh ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. B·∫°n c√≥ th·ªÉ th·ª≠ ch·ªçn th√™m m√†u s·∫Øc, size, ch·∫•t li·ªáu ho·∫∑c th∆∞∆°ng hi·ªáu kh√°c nh√©!"
            )
            return []

        # Format k·∫øt qu·∫£
        msg = "‚ú® ƒê√¢y l√† m·ªôt v√†i g·ª£i √Ω t·ª´ **M·ªôc Wear** cho b·∫°n:\n\n"
        for i, p in enumerate(products, 1):
            name = p.get("nameProduct", "S·∫£n ph·∫©m")
            code = p.get("codeProduct", "")
            price = p.get("salePrice", 0)
            promo = p.get("promotionPercent", 0)
            sold = p.get("quantitySaled", 0)

            if promo and promo > 0:
                final_price = int(price * (100 - promo) / 100)
                price_text = f"üí∞ Gi√°: **{final_price:,}ƒë**  (~~{price:,}ƒë~~ *-{promo}%*)"
            else:
                price_text = f"üí∞ Gi√°: **{price:,}ƒë**"

            msg += (
                f"{i}. üßæ **[{name}](http://localhost:5173/view-product/{code})**\n"
                f"{price_text}\n"
                f"üì¶ ƒê√£ b√°n: {sold}\n\n"
            )

        msg += "üëâ B·∫°n c√≥ mu·ªën m√¨nh l·ªçc th√™m theo m√†u s·∫Øc, ch·∫•t li·ªáu ho·∫∑c kho·∫£ng gi√° kh√¥ng?"
        dispatcher.utter_message(text=msg)
        return []


# --------- T∆∞ v·∫•n size theo chi·ªÅu cao / c√¢n n·∫∑ng ----------
class ActionSuggestSize(Action):
    def name(self) -> Text:
        return "action_suggest_size"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        height_val = next(tracker.get_latest_entity_values("height"), None)
        weight_val = next(tracker.get_latest_entity_values("weight"), None)

        def normalize(value: Text, unit: str) -> int | None:
            """Chu·∫©n ho√° s·ªë ƒëo th√†nh integer cm/kg."""
            if not value:
                return None
            s = str(value).lower().replace("cm", "").replace("kg", "").replace("m", "")
            s = s.replace(".", "").strip()
            try:
                n = int(s)
                if unit == "height" and 100 <= n <= 220:
                    return n
                if unit == "weight" and 30 <= n <= 150:
                    return n
            except ValueError:
                return None
            return None

        h = normalize(height_val, "height")
        w = normalize(weight_val, "weight")

        # B·∫£ng size chu·∫©n (tham kh·∫£o)
        size_guide = [
            {"size": "S",  "height": (160, 166), "weight": (50, 60)},
            {"size": "M",  "height": (167, 172), "weight": (61, 67)},
            {"size": "L",  "height": (173, 178), "weight": (68, 74)},
            {"size": "XL", "height": (179, 185), "weight": (75, 85)},
            {"size": "2XL","height": (186, 195), "weight": (86, 100)},
        ]

        # ===== 1. C√≥ c·∫£ chi·ªÅu cao v√† c√¢n n·∫∑ng =====
        if h and w:
            for g in size_guide:
                if g["height"][0] <= h <= g["height"][1] and g["weight"][0] <= w <= g["weight"][1]:
                    dispatcher.utter_message(
                        text=f"üëâ V·ªõi chi·ªÅu cao **{h}cm** v√† c√¢n n·∫∑ng **{w}kg**, size ph√π h·ª£p nh·∫•t l√† **{g['size']}** üëç"
                    )
                    return []
            # Ngo√†i b·∫£ng ‚Üí g·ª£i √Ω g·∫ßn nh·∫•t
            if h > 195 or w > 100:
                dispatcher.utter_message(
                    text=f"‚ö†Ô∏è V·ªõi s·ªë ƒëo **{h}cm/{w}kg**, b·∫°n n√™n th·ª≠ **2XL ho·∫∑c l·ªõn h∆°n**. "
                         "ƒê·ªÉ ch·∫Øc ch·∫Øn, b·∫°n c√≥ th·ªÉ th·ª≠ tr·ª±c ti·∫øp t·∫°i c·ª≠a h√†ng nh√©!"
                )
            elif h < 160 or w < 50:
                dispatcher.utter_message(
                    text=f"ü§î V·ªõi s·ªë ƒëo **{h}cm/{w}kg**, size **S** c√≥ th·ªÉ v·ª´a. "
                         "N·∫øu th√≠ch tho·∫£i m√°i h∆°n th√¨ c√≥ th·ªÉ th·ª≠ **M**."
                )
            else:
                dispatcher.utter_message(
                    text=f"üëâ V·ªõi **{h}cm/{w}kg**, size tham kh·∫£o l√† **L ho·∫∑c XL**, "
                         "t√πy v√†o d√°ng ng∆∞·ªùi v√† s·ªü th√≠ch m·∫∑c √¥m hay r·ªông."
                )

        # ===== 2. Ch·ªâ c√≥ chi·ªÅu cao =====
        elif h and not w:
            if h < 165:
                size = "S ho·∫∑c M"
            elif h < 175:
                size = "M ho·∫∑c L"
            elif h < 185:
                size = "L ho·∫∑c XL"
            else:
                size = "XL ho·∫∑c 2XL"
            dispatcher.utter_message(
                text=f"üìè V·ªõi chi·ªÅu cao **{h}cm**, size tham kh·∫£o l√† **{size}**. "
                     "N·∫øu b·∫°n cho m√¨nh th√™m c√¢n n·∫∑ng th√¨ m√¨nh s·∫Ω t∆∞ v·∫•n ch√≠nh x√°c h∆°n üëç"
            )

        # ===== 3. Ch·ªâ c√≥ c√¢n n·∫∑ng =====
        elif w and not h:
            if w < 55:
                size = "S"
            elif w < 65:
                size = "M"
            elif w < 75:
                size = "L"
            elif w < 85:
                size = "XL"
            else:
                size = "2XL"
            dispatcher.utter_message(
                text=f"‚öñÔ∏è V·ªõi c√¢n n·∫∑ng **{w}kg**, size tham kh·∫£o l√† **{size}**. "
                     "N·∫øu b·∫°n cho m√¨nh th√™m chi·ªÅu cao th√¨ s·∫Ω chu·∫©n h∆°n n·ªØa."
            )

        # ===== 4. Kh√¥ng c√≥ g√¨ =====
        else:
            dispatcher.utter_message(
                text="üìè B·∫°n vui l√≤ng cho m√¨nh bi·∫øt **chi·ªÅu cao (cm)** v√†/ho·∫∑c **c√¢n n·∫∑ng (kg)** ƒë·ªÉ m√¨nh t∆∞ v·∫•n size ph√π h·ª£p nh√©."
            )

        return []
