import api from "../ultils/api";

const API_URL_CHECKOUT = "/api/sale-pos";
const API_URL_PRODUCT_DETAIL_WITH_STATUS_TRUE =
  "/api/product-details/statustrue";
const API_URL_CUSTOMERS = "/api/customers";
const API_URL_VOUCHERS = "/api/vouchers";
const API_Barcode = "/api/barcode/barcode";

const paymentMethodMapping = {
  cash: 0,
  bank_transfer: 1,
};

const SalePOS = {
  getProductDetails: async (filters) => {
    console.log("üìå L·∫•y danh s√°ch s·∫£n ph·∫©m v·ªõi b·ªô l·ªçc:", filters);
    try {
      const response = await api.get(API_URL_PRODUCT_DETAIL_WITH_STATUS_TRUE, {
        params: filters,
      });
      console.log("‚úÖ Danh s√°ch s·∫£n ph·∫©m:", response.data.data);
      return response.data.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  getCustomers: async (filters) => {
    console.log("üìå L·∫•y danh s√°ch kh√°ch h√†ng v·ªõi b·ªô l·ªçc:", filters);
    try {
      const response = await api.get(API_URL_CUSTOMERS, { params: filters });
      console.log("‚úÖ D·ªØ li·ªáu kh√°ch h√†ng:", response.data.data);
      return response.data.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi l·∫•y kh√°ch h√†ng:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  createOrder: async (orderData) => {
    console.log("üìå T·∫°o ƒë∆°n h√†ng:", orderData);
    try {
      // Thi·∫øt l·∫≠p customerId m·∫∑c ƒë·ªãnh l√† null ƒë·ªÉ server x·ª≠ l√Ω kh√°ch v√£ng lai
      const modifiedOrderData = {
        ...orderData,
        customerId: orderData.customerId && orderData.customerId !== -1 ? orderData.customerId : null,
        paymentMethod: paymentMethodMapping[orderData.paymentMethod] ?? 0
      };

      console.log(
        "üîç D·ªØ li·ªáu th·ª±c s·ª± g·ª≠i ƒëi:",
        JSON.stringify(modifiedOrderData, null, 2)
      );

      const response = await api.post(`${API_URL_CHECKOUT}/orders`, modifiedOrderData);
      console.log("‚úÖ ƒê∆°n h√†ng t·∫°o th√†nh c√¥ng:", response.data);

      if (!response.data || !response.data.data || !response.data.data.id) {
        throw new Error("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng!");
      }

      return response.data.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng:",
        error.response?.data || error.message
      );
      throw error;
    }
  },


  addProductToCart: async (orderId, productData) => {
    console.log(`üìå Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng ${orderId}: `, productData);
    try {
      const response = await api.post(
        `${API_URL_CHECKOUT}/orders/${orderId}/products`,
        productData
      );
      console.log("‚úÖ S·∫£n ph·∫©m ƒë√£ th√™m v√†o ƒë∆°n h√†ng:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  completePayment: async (orderId, paymentData) => {
    console.log(`üìå Ho√†n t·∫•t thanh to√°n cho ƒë∆°n h√†ng #${orderId}`);
    try {
      const response = await api.put(
        `${API_URL_CHECKOUT}/orders/${orderId}/payment`,
        paymentData
      );
      console.log("‚úÖ Thanh to√°n ho√†n t·∫•t:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi ho√†n t·∫•t thanh to√°n:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  getVouchers: async () => {
    console.log("üìå L·∫•y danh s√°ch voucher h·ª£p l·ªá");
    try {
      const response = await api.get(API_URL_VOUCHERS);
      console.log("‚úÖ Danh s√°ch voucher h·ª£p l·ªá:", response.data.data);
      return response.data.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi l·∫•y danh s√°ch voucher:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  updateOrderInfo: async (orderId, updateData) => {
    console.log(`üìå C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng #${orderId}:`, updateData);
    try {
      const response = await api.post(`${API_URL_CHECKOUT}/checkout`, {
        orderId: orderId,
        customerId: updateData.customerId,
        voucherId: updateData.voucherId,
      });
      console.log("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng th√†nh c√¥ng:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  checkout: async (orderData) => {
    console.log("üìå B·∫Øt ƒë·∫ßu lu·ªìng thanh to√°n v·ªõi ƒë∆°n h√†ng:", orderData);
    try {
      let orderId = orderData.orderId ?? null;
      if (!orderId) {
        console.log("üìå Kh√¥ng c√≥ orderId, ti·∫øn h√†nh t·∫°o ƒë∆°n h√†ng m·ªõi.");
        const orderResponse = await SalePOS.createOrder(orderData);
        orderId = orderResponse.id;
      } else {
        console.log("‚úÖ S·ª≠ d·ª•ng orderId ƒë√£ c√≥:", orderId);
      }
      const existingOrder = await SalePOS.getOrderDetails(orderId);
      const existingProducts = existingOrder.orderDetails || [];
      const productsToAdd = [];
      if (orderData.orderDetails && orderData.orderDetails.length > 0) {
        for (let item of orderData.orderDetails) {
          const existingItem = existingProducts.find(
            (existing) => existing.productDetail.id === item.productDetailId
          );
          if (!existingItem) {
            productsToAdd.push(item);
          }
        }
      }
      if (productsToAdd.length > 0) {
        for (let item of productsToAdd) {
          await SalePOS.addProductToCart(orderId, item);
        }
        console.log("‚úÖ ƒê√£ th√™m c√°c s·∫£n ph·∫©m m·ªõi v√†o ƒë∆°n h√†ng:", productsToAdd);
      }
      const paymentData = {
        customerId: orderData.customerId,
        voucherId: orderData.voucherId,
      };
      await SalePOS.updateOrderInfo(orderId, paymentData);
      console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t customerId v√† voucherId");
      console.log("üîç X·ª≠ l√Ω thanh to√°n cho ƒë∆°n h√†ng:", orderId);
      const paymentResponse = await SalePOS.completePayment(
        orderId,
        paymentData
      );
      console.log("‚úÖ Thanh to√°n th√†nh c√¥ng:", paymentResponse);
      return { orderId, paymentResponse };
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi checkout:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  getProductByBarcode: async (barcode) => {
    console.log("üìå L·∫•y s·∫£n ph·∫©m theo m√£ v·∫°ch:", barcode);
    try {
      const response = await api.get(API_Barcode);
      console.log("‚úÖ S·∫£n ph·∫©m t·ª´ m√£ v·∫°ch:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo m√£ v·∫°ch:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  getOrderDetails: async (orderId) => {
    console.log(`üìå L·∫•y chi ti·∫øt ƒë∆°n h√†ng #${orderId}`);
    try {
      const response = await api.get(`${API_URL_CHECKOUT}/orders/${orderId}`);
      console.log("‚úÖ Chi ti·∫øt ƒë∆°n h√†ng:", response.data.data);
      return response.data.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  cancelOrder: async (orderId) => {
    console.log(`üìå H·ªßy ƒë∆°n h√†ng #${orderId}`);
    try {
      const response = await api.put(
        `${API_URL_CHECKOUT}/orders/${orderId}/cancel`
      );
      console.log("‚úÖ H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi h·ªßy ƒë∆°n h√†ng:",
        error.response?.data || error.message
      );
      throw error;
    }
  },

  updatePaymentMethod: async (orderId, paymentMethod) => {
    console.log(
      `üìå C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n cho ƒë∆°n h√†ng #${orderId}:`,
      paymentMethod
    );
    try {
      const response = await api.put(
        `${API_URL_CHECKOUT}/orders/${orderId}/payment-method`,
        { paymentMethod: paymentMethodMapping[paymentMethod] ?? 0 }
      );
      console.log(
        "‚úÖ C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n th√†nh c√¥ng:",
        response.data
      );
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå L·ªói khi c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n:",
        error.response?.data || error.message
      );
      throw error;
    }
  },
};

export default SalePOS;
