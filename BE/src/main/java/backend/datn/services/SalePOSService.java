package backend.datn.services;

import backend.datn.dto.request.OrderDetailCreateRequest;
import backend.datn.dto.request.OrderPOSCreateRequest;
import backend.datn.dto.response.OrderResponse;
import backend.datn.entities.*;
import backend.datn.mapper.OrderMapper;
import backend.datn.helpers.repositories.*;
import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.UUID;

@Service
public class SalePOSService {

    private static final Logger logger = LoggerFactory.getLogger(SalePOSService.class);
    private static final String VIETQR_API_URL = "https://img.vietqr.io/image/";
    private static final String BANK_BIN = "970436"; // BIN c·ªßa Vietcombank
    private static final String ACCOUNT_NUMBER = "1040023014"; // S·ªë t√†i kho·∫£n c·ªßa b·∫°n

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private OrderDetailRepository orderDetailRepository;

    @Autowired
    private CustomerService customerService;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private ProductDetailService productDetailService;

    @Autowired
    private VoucherService voucherService;
    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private ProductDetailRepository productDetailRepository;
    @Autowired
    private EmployeeRepository employeeRepository;
    @Autowired
    private VoucherRepository voucherRepository;

    public Order findOrderById(Integer orderId) {
        return orderRepository.findById(orderId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng #" + orderId));
    }

    /**
     * T·∫°o m·ªõi ƒë∆°n h√†ng r·ªóng cho POS
     * ƒê∆∞·ª£c s·ª≠ d·ª•ng khi b·∫Øt ƒë·∫ßu m·ªôt giao d·ªãch b√°n h√†ng t·∫°i qu·∫ßy.
     */
    @Transactional
    public Order createEmptyOrder(Customer customer, Employee employee, Voucher voucher, Integer paymentMethod) {
        logger.info("B·∫Øt ƒë·∫ßu t·∫°o ƒë∆°n h√†ng. Customer ID: {}, Employee ID: {}, Voucher ID: {}, Payment Method: {}",
                (customer != null) ? customer.getId() : "Kh√°ch v√£ng lai",
                employee.getId(),
                (voucher != null) ? voucher.getId() : "Kh√¥ng c√≥ voucher",
                paymentMethod);

        if (employee == null || employeeService.findById(employee.getId()).isEmpty()) {
            throw new IllegalArgumentException("Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i.");
        }

        if (voucher != null && voucherService.findById(voucher.getId()).isEmpty()) {
            throw new IllegalArgumentException("Voucher kh√¥ng t·ªìn t·∫°i.");
        }

        if (paymentMethod == null || paymentMethod < 0 || paymentMethod > 1) { // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
            throw new IllegalArgumentException("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n 0 (Ti·ªÅn m·∫∑t) ho·∫∑c 1 (VNPay).");
        }

        // N·∫øu kh√°ch h√†ng l√† null, g√°n kh√°ch h√†ng v√£ng lai (ID = -1)
        if (customer == null) {
            customer = new Customer();
            customer.setId(-1);
            customer.setFullname("Kh√°ch v√£ng lai");
        }

        Order order = new Order();
        order.setCustomer(customer);
        order.setEmployee(employee);
        order.setVoucher(voucher);
        order.setPaymentMethod(paymentMethod);
        order.setStatusOrder(1);
        order.setKindOfOrder(true);
        order.setOrderDetails(new ArrayList<>());
        order.setTotalAmount(0);
        order.setTotalBill(BigDecimal.ZERO);
        order.setOriginalTotal(BigDecimal.ZERO);
        order.setOrderCode("ORD-" + UUID.randomUUID().toString().substring(0, 8).toUpperCase());
        order.setCreateDate(LocalDateTime.now());

        Order savedOrder = orderRepository.save(order);
        logger.info("ƒê√£ t·∫°o ƒë∆°n h√†ng. Order ID: {}, Order Code: {}", savedOrder.getId(), savedOrder.getOrderCode());
        return savedOrder;

    }

    public String createVietQRPaymentUrl(Integer orderId) {
        logger.info("ƒêang t·∫°o URL VietQR cho ƒë∆°n h√†ng ID: {}", orderId);

        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + orderId));

        // T√≠nh t·ªïng ti·ªÅn c·∫ßn thanh to√°n (sau khi gi·∫£m gi√°)
        updateOrderTotal(order);
        BigDecimal amount = order.getTotalBill();
        String transactionId = "HD1-" + order.getOrderCode(); // M√£ giao d·ªãch duy nh·∫•t

        // T·∫°o URL VietQR
        String vietQrUrl = String.format(
                "%s%s-%s-qr_only.png?amount=%s&addInfo=%s",
                VIETQR_API_URL, BANK_BIN, ACCOUNT_NUMBER, amount.toString(), transactionId
        );

        logger.info("URL VietQR ƒë√£ t·∫°o: {}", vietQrUrl);
        return vietQrUrl;
    }


    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng c·ªßa ƒë∆°n h√†ng POS
     * Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi th√™m, c·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
     */
    public OrderResponse addProductToCart(Integer orderId, OrderDetailCreateRequest detailReq) {
        logger.info("B·∫Øt ƒë·∫ßu th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng. Order ID: {}, Product Detail ID: {}, Quantity: {}",
                orderId, detailReq.getProductDetailId(), detailReq.getQuantity());

        // T√¨m ƒë∆°n h√†ng theo ID
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + orderId));

        // T√¨m s·∫£n ph·∫©m theo ID
        ProductDetail productDetail = productDetailService.findById(detailReq.getProductDetailId())
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + detailReq.getProductDetailId()));

        // Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng (tr√°nh c·∫≠p nh·∫≠t sai do giao d·ªãch ƒë·ªìng th·ªùi)
        synchronized (productDetail) {
            if (productDetail.getQuantity() < detailReq.getQuantity()) {
                logger.error("S·∫£n ph·∫©m {} kh√¥ng ƒë·ªß h√†ng.", productDetail.getProduct().getProductName());
                throw new IllegalArgumentException("S·∫£n ph·∫©m " + productDetail.getProduct().getProductName() + " kh√¥ng ƒë·ªß h√†ng!");
            }

            OrderDetail existingOrderDetail = order.getOrderDetails().stream()
                    .filter(od -> od.getProductDetail().getId().equals(detailReq.getProductDetailId()))
                    .findFirst()
                    .orElse(null);

            if (existingOrderDetail != null) {
                existingOrderDetail.setQuantity(existingOrderDetail.getQuantity() + detailReq.getQuantity());
                orderDetailRepository.save(existingOrderDetail);
                logger.info("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng th√†nh c√¥ng. Order Detail ID: {}", existingOrderDetail.getId());
            } else {
                OrderDetail newOrderDetail = new OrderDetail();
                newOrderDetail.setOrder(order);
                newOrderDetail.setProductDetail(productDetail);
                newOrderDetail.setQuantity(detailReq.getQuantity());

                // T√≠nh gi√° sau khuy·∫øn m√£i
                BigDecimal price = productDetail.getSalePrice();
                if (productDetail.getPromotion() != null && productDetail.getPromotion().getStatus()
                        && !productDetail.getPromotion().getStartDate().isAfter(LocalDateTime.now())
                        && !productDetail.getPromotion().getEndDate().isBefore(LocalDateTime.now())) {
                    BigDecimal discountPercentage = BigDecimal.valueOf(productDetail.getPromotion().getPromotionPercent()).divide(BigDecimal.valueOf(100));
                    BigDecimal discountAmount = price.multiply(discountPercentage);
                    price = price.subtract(discountAmount);
                }

                newOrderDetail.setPrice(price);
                order.getOrderDetails().add(newOrderDetail);
                orderDetailRepository.save(newOrderDetail);
                logger.info("Th√™m m·ªõi s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng. Order Detail ID: {}", newOrderDetail.getId());
            }

            // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn (totalBill) v√† t·ªïng s·ªë l∆∞·ª£ng (totalAmount) c·ªßa ƒë∆°n h√†ng sau khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.
            updateOrderTotal(order);

            // L∆∞u ƒë∆°n h√†ng sau khi c·∫≠p nh·∫≠t gi·ªè h√†ng
            OrderResponse orderResponse = OrderMapper.toOrderResponse(orderRepository.save(order));
            logger.info("C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√† t·ªïng s·ªë l∆∞·ª£ng th√†nh c√¥ng. Order ID: {}", order.getId());
            return orderResponse;
        }
    }

    private void updateOrderTotal(Order order) {
        // Ki·ªÉm tra xem order c√≥ null kh√¥ng
        logger.info("üìù [DEBUG] Order nh·∫≠n v√†o: {}", order);
        if (order == null) {
            logger.error("‚ùå [ERROR] Order b·ªã null!");
            return;
        }

        // Ki·ªÉm tra xem danh s√°ch orderDetails c√≥ null ho·∫∑c r·ªóng kh√¥ng
        logger.info("üìù [DEBUG] OrderDetails nh·∫≠n v√†o: {}", order.getOrderDetails());
        if (order.getOrderDetails() == null || order.getOrderDetails().isEmpty()) {
            logger.error("‚ùå [ERROR] OrderDetails null ho·∫∑c r·ªóng. Order ID: {}", order.getId());
            return;
        }

        BigDecimal originalTotal = BigDecimal.ZERO; // T·ªïng ti·ªÅn ch∆∞a √°p d·ª•ng gi·∫£m gi√°
        BigDecimal totalBill = BigDecimal.ZERO; // T·ªïng ti·ªÅn sau khi √°p khuy·∫øn m√£i
        int totalAmount = 0;

        for (OrderDetail orderDetail : order.getOrderDetails()) {
            // Ki·ªÉm tra orderDetail c√≥ b·ªã null kh√¥ng
            if (orderDetail == null || orderDetail.getProductDetail() == null) {
                logger.error("‚ùå [ERROR] OrderDetail ho·∫∑c ProductDetail b·ªã null. Order ID: {}", order.getId());
                continue;
            }

            // Log th√¥ng tin t·ª´ng s·∫£n ph·∫©m
            logger.info("üîé [CHECK] OrderDetail: productId={}, quantity={}, price={}",
                    orderDetail.getProductDetail().getId(),
                    orderDetail.getQuantity(),
                    orderDetail.getProductDetail().getSalePrice());

            BigDecimal price = orderDetail.getProductDetail().getSalePrice(); // Gi√° g·ªëc
            BigDecimal originalPrice = price; // L∆∞u gi√° g·ªëc ƒë·ªÉ debug
            ProductDetail productDetail = orderDetail.getProductDetail();

            // T√≠nh t·ªïng ti·ªÅn ch∆∞a gi·∫£m gi√°
            originalTotal = originalTotal.add(originalPrice.multiply(BigDecimal.valueOf(orderDetail.getQuantity())));

            // Ki·ªÉm tra v√† √°p d·ª•ng khuy·∫øn m√£i (n·∫øu c√≥)
            if (productDetail.getPromotion() != null) {
                Promotion promotion = productDetail.getPromotion();
                if (!promotion.getStatus()) {
                    logger.warn("‚ö†Ô∏è [PROMOTION] Khuy·∫øn m√£i {} b·ªã v√¥ hi·ªáu h√≥a", promotion.getPromotionName());
                } else if (promotion.getStartDate().isAfter(LocalDateTime.now()) || promotion.getEndDate().isBefore(LocalDateTime.now())) {
                    logger.warn("‚ö†Ô∏è [PROMOTION] Khuy·∫øn m√£i {} ch∆∞a ƒë·∫øn h·∫°n ho·∫∑c ƒë√£ h·∫øt h·∫°n", promotion.getPromotionName());
                } else {
                    BigDecimal discountPercentage = BigDecimal.valueOf(promotion.getPromotionPercent()).divide(BigDecimal.valueOf(100));
                    BigDecimal discountAmount = price.multiply(discountPercentage);
                    price = price.subtract(discountAmount);

                    logger.info("‚úÖ [DISCOUNT] Gi√° g·ªëc: {}, Gi√° gi·∫£m: {}, Gi√° sau gi·∫£m: {}",
                            originalPrice, discountAmount, price);
                }
            }

            totalBill = totalBill.add(price.multiply(BigDecimal.valueOf(orderDetail.getQuantity())));
            totalAmount += orderDetail.getQuantity();
        }

        // Ki·ªÉm tra v√† √°p d·ª•ng Voucher n·∫øu c√≥
        if (order.getVoucher() != null) {
            Voucher voucher = order.getVoucher();
            if (!voucher.getStatus()) {
                logger.warn("‚ö†Ô∏è [VOUCHER] Voucher {} b·ªã v√¥ hi·ªáu h√≥a", voucher.getVoucherCode());
            } else if (totalBill.compareTo(voucher.getMinCondition()) < 0) {
                logger.warn("‚ö†Ô∏è [VOUCHER] ƒê∆°n h√†ng kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán √°p d·ª•ng voucher (y√™u c·∫ßu: {}, hi·ªán t·∫°i: {})",
                        voucher.getMinCondition(), totalBill);
            } else {
                BigDecimal beforeVoucher = totalBill;
                totalBill = voucherService.applyVoucher(voucher, totalBill);
                BigDecimal voucherDiscount = beforeVoucher.subtract(totalBill);

                logger.info("‚úÖ [VOUCHER] Gi√° tr∆∞·ªõc: {}, Voucher gi·∫£m: {}, Gi√° sau gi·∫£m: {}",
                        beforeVoucher, voucherDiscount, totalBill);
            }
        }

        // G√°n l·∫°i gi√° tr·ªã cho order
        order.setOriginalTotal(originalTotal); // Th√™m originalTotal v√†o order
        order.setTotalBill(totalBill);
        order.setTotalAmount(totalAmount);

        logger.info("‚úÖ [UPDATE ORDER] Order ID: {}, Tr∆∞·ªõc gi·∫£m gi√° (originalTotal): {}, Sau khuy·∫øn m√£i: {}, Sau voucher: {}, T·ªïng s·ªë l∆∞·ª£ng: {}",
                order.getId(), originalTotal, totalBill, totalBill, totalAmount);
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng sau khi thanh to√°n th√†nh c√¥ng.
     * Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi tr·ª´ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
     */
    @Transactional
    public OrderResponse updateOrderStatusAfterPayment(Integer orderId, Integer customerId, Integer voucherId) {
        logger.info("B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng sau thanh to√°n. Order ID: {}, Customer ID: {}, Voucher ID: {}",
                orderId, customerId, voucherId);

        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + orderId));

        // Ki·ªÉm tra n·∫øu ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh
        if (order.getStatusOrder() == 5) {
            throw new IllegalStateException("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n tr∆∞·ªõc ƒë√≥!");
        }

        // C·∫≠p nh·∫≠t customer v√† voucher n·∫øu c√≥ gi√° tr·ªã m·ªõi
        if (customerId != null && customerId != order.getCustomer().getId()) {
            Customer customer = customerService.findById(customerId)
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID: " + customerId));
            order.setCustomer(customer);
            logger.info("C·∫≠p nh·∫≠t customer_id th√†nh: {}", customerId);
        }
        if (voucherId != null && (order.getVoucher() == null || voucherId != order.getVoucher().getId())) {
            Voucher voucher = voucherService.findById(voucherId)
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y voucher v·ªõi ID: " + voucherId));
            order.setVoucher(voucher);
            logger.info("C·∫≠p nh·∫≠t voucher_id th√†nh: {}", voucherId);
        }

        // Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi tr·ª´
        for (OrderDetail orderDetail : order.getOrderDetails()) {
            ProductDetail productDetail = orderDetail.getProductDetail();
            int quantity = productDetail.getQuantity();
            int orderedQuantity = orderDetail.getQuantity();

            if (quantity < orderedQuantity) {
                throw new IllegalArgumentException("S·∫£n ph·∫©m " + productDetail.getProduct().getProductName() + " kh√¥ng ƒë·ªß h√†ng trong kho!");
            }

            productDetail.setQuantity(quantity - orderedQuantity);
            productDetailService.update(productDetail);

            logger.info("C·∫≠p nh·∫≠t t·ªìn kho s·∫£n ph·∫©m: {} | Tr∆∞·ªõc: {} | Sau: {} | ƒê√£ b√°n: {}",
                    productDetail.getProduct().getProductName(), quantity, productDetail.getQuantity(), orderDetail.getQuantity());

        }

        // üî• Quan tr·ªçng: C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn tr∆∞·ªõc khi l∆∞u ƒë∆°n h√†ng
        updateOrderTotal(order);

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "Ho√†n th√†nh"
        order.setStatusOrder(5);
        OrderResponse response = OrderMapper.toOrderResponse(orderRepository.save(order));
        logger.info("Thanh to√°n th√†nh c√¥ng! Order ID: {}, T·ªïng ti·ªÅn: {}, T·ªïng s·ªë l∆∞·ª£ng: {}",
                order.getId(), order.getTotalBill(), order.getTotalAmount());

        return response;
    }


    @Transactional
    public Order thanhToan(OrderPOSCreateRequest request) {
        if (request.getOrderId() == null) {
            logger.error("Order ID is null in request");
            throw new IllegalArgumentException("Order ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }

        Order order = orderRepository.findById(request.getOrderId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n."));


        // C·∫≠p nh·∫≠t customerId
        if (request.getCustomerId() != null && request.getCustomerId() != order.getCustomer().getId()) {
            Customer customer = customerService.findById(request.getCustomerId())
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID: " + request.getCustomerId()));
            order.setCustomer(customer);
            logger.info("C·∫≠p nh·∫≠t customer_id th√†nh: {}", request.getCustomerId());
        }

        // C·∫≠p nh·∫≠t voucherId
        if (request.getVoucherId() != null && (order.getVoucher() == null || request.getVoucherId() != order.getVoucher().getId())) {
            Voucher voucher = voucherService.findById(request.getVoucherId())
                    .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y voucher v·ªõi ID: " + request.getVoucherId()));
            order.setVoucher(voucher);
            logger.info("C·∫≠p nh·∫≠t voucher_id th√†nh: {}", request.getVoucherId());
        }

        // ‚úÖ C·∫≠p nh·∫≠t l·∫°i t·ªïng ti·ªÅn tr∆∞·ªõc khi l∆∞u ƒë∆°n h√†ng
        updateOrderTotal(order);

        // L∆∞u l·∫°i h√≥a ƒë∆°n ƒë√£ c·∫≠p nh·∫≠t v√†o c∆° s·ªü d·ªØ li·ªáu
        return orderRepository.save(order);
    }

    private BigDecimal getDiscountedPrice(ProductDetail productDetail) {
        BigDecimal salePrice = productDetail.getSalePrice();
        if (productDetail.getPromotion() != null) {
            BigDecimal discountPercent = BigDecimal.valueOf(100 - productDetail.getPromotion().getPromotionPercent())
                    .divide(BigDecimal.valueOf(100), RoundingMode.HALF_UP);
            return salePrice.multiply(discountPercent);
        }
        return salePrice;
    }

    /**
     * C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n c·ªßa ƒë∆°n h√†ng
     * @param orderId ID c·ªßa ƒë∆°n h√†ng
     * @param paymentMethod Ph∆∞∆°ng th·ª©c thanh to√°n m·ªõi (0: Ti·ªÅn m·∫∑t, 1: VNPay)
     * @return OrderResponse ch·ª©a th√¥ng tin ƒë∆°n h√†ng ƒë√£ c·∫≠p nh·∫≠t
     */
    @Transactional
    public OrderResponse updatePaymentMethod(Integer orderId, Integer paymentMethod) {
        logger.info("B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n. Order ID: {}, Payment Method: {}", orderId, paymentMethod);

        // T√¨m ƒë∆°n h√†ng theo ID
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + orderId));

        // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ ph·∫£i l√† ƒë∆°n POS kh√¥ng
        if (!order.getKindOfOrder()) {
            logger.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n cho ƒë∆°n h√†ng online qua ch·ª©c nƒÉng POS. Order ID: {}", orderId);
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n cho ƒë∆°n h√†ng POS.");
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
        if (order.getStatusOrder() == 5 || order.getStatusOrder() == -1) {
            logger.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n cho ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ h·ªßy. Order ID: {}", orderId);
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n cho ƒë∆°n h√†ng ch∆∞a ho√†n th√†nh ho·∫∑c ch∆∞a b·ªã h·ªßy.");
        }

        // Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n h·ª£p l·ªá
        if (paymentMethod == null || paymentMethod < 0 || paymentMethod > 1) {
            logger.error("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá: {}. Order ID: {}", paymentMethod, orderId);
            throw new IllegalArgumentException("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n 0 (Ti·ªÅn m·∫∑t) ho·∫∑c 1 (Chuy·ªÉn kho·∫£n).");
        }

        // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n
        order.setPaymentMethod(paymentMethod);
        logger.info("C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n th√†nh: {}", paymentMethod);

        // L∆∞u ƒë∆°n h√†ng
        Order savedOrder = orderRepository.save(order);
        logger.info("C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c thanh to√°n th√†nh c√¥ng. Order ID: {}, Payment Method: {}", orderId, paymentMethod);

        return OrderMapper.toOrderResponse(savedOrder);
    }

    /**
     * H·ªßy ƒë∆°n h√†ng POS
     * @param orderId ID c·ªßa ƒë∆°n h√†ng c·∫ßn h·ªßy
     * @return OrderResponse ch·ª©a th√¥ng tin ƒë∆°n h√†ng ƒë√£ h·ªßy
     */
    @Transactional
    public OrderResponse cancelOrder(Integer orderId) {
        logger.info("B·∫Øt ƒë·∫ßu h·ªßy ƒë∆°n h√†ng. Order ID: {}", orderId);

        // T√¨m ƒë∆°n h√†ng theo ID
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + orderId));

        // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ ph·∫£i l√† ƒë∆°n POS kh√¥ng
        if (!order.getKindOfOrder()) {
            logger.error("Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng online qua ch·ª©c nƒÉng POS. Order ID: {}", orderId);
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng POS.");
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng
        if (order.getStatusOrder() != 1) {
            logger.error("ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i 'Ch·ªù thanh to√°n'. Tr·∫°ng th√°i hi·ªán t·∫°i: {}. Order ID: {}",
                    order.getStatusOrder(), orderId);
            throw new IllegalStateException("Ch·ªâ c√≥ th·ªÉ h·ªßy ƒë∆°n h√†ng ·ªü tr·∫°ng th√°i 'Ch·ªù thanh to√°n'.");
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i
        order.setStatusOrder(-1); // ƒê√£ h·ªßy

        // L∆∞u ƒë∆°n h√†ng
        Order savedOrder = orderRepository.save(order);
        logger.info("H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng. Order ID: {}, Tr·∫°ng th√°i: -1", orderId);

        return OrderMapper.toOrderResponse(savedOrder);
    }

}
